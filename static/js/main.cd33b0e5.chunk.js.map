{"version":3,"sources":["Sound/lowPulse.wav","Sound/highPulse.wav","Metronome.js","index.js"],"names":["Metronome","state","playing","count","bpm","beatsPerMeasure","click1","Audio","lowPulse","click2","highPulse","handleBpmChange","e","target","value","clearInterval","timer","setInterval","playClick","setState","startStop","play","this","className","type","min","max","onChange","onClick","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sNAAe,G,MAAA,IAA0B,sCCA1B,MAA0B,sCCmF1BA,E,4MA5EbC,MAAQ,CACNC,SAAS,EACTC,MAAO,EACPC,IAAK,IACLC,gBAAiB,G,EAGnBC,OAAS,IAAIC,MAAMC,G,EACnBC,OAAS,IAAIF,MAAMG,G,EAEnBC,gBAAkB,SAACC,GACjB,IAAMR,EAAMQ,EAAEC,OAAOC,MAEjB,EAAKb,MAAMC,SACba,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKC,UAAY,GAAKd,EAAO,KAEtD,EAAKe,SAAS,CACZhB,MAAO,EACPC,SAGF,EAAKe,SAAS,CAAEf,S,EAGpBgB,UAAY,WACN,EAAKnB,MAAMC,SACba,cAAc,EAAKC,OACnB,EAAKG,SAAS,CACZjB,SAAS,MAGX,EAAKc,MAAQC,YAAkD,IAAtC,EAAKC,UAAU,GAAK,EAAKjB,MAAMG,MACxD,EAAKe,SACH,CACEhB,MAAO,EACPD,SAAS,GAEX,EAAKgB,e,EAKXA,UAAY,WAAO,IAAD,EACmB,EAAKjB,MADxB,EACRE,MADQ,EACDE,kBAEiB,EAC9B,EAAKI,OAAOY,OAEZ,EAAKf,OAAOe,OAGd,EAAKF,UAAS,SAAClB,GAAD,MAAY,CACxBE,OAAQF,EAAME,MAAQ,GAAKF,EAAMI,qB,uDAG3B,IAAD,EACkBiB,KAAKrB,MAAtBC,EADD,EACCA,QAASE,EADV,EACUA,IACjB,OACE,sBAAKmB,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,gCAAMnB,EAAN,SACA,uBACEoB,KAAK,QACLC,IAAI,KACJC,IAAI,MACJZ,MAAOV,EACPuB,SAAUL,KAAKX,qBAGnB,wBAAQiB,QAASN,KAAKF,UAAtB,SAAkClB,EAAU,OAAS,iB,GAvErC2B,IAAMC,WCF9BC,IAASC,OAAO,cAAC,EAAD,IAAeC,SAASC,cAAc,Y","file":"static/js/main.cd33b0e5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lowPulse.48171f6d.wav\";","export default __webpack_public_path__ + \"static/media/highPulse.850b947b.wav\";","import React from \"react\";\r\nimport \"./Metronome.css\";\r\n\r\nimport lowPulse from \"./Sound/lowPulse.wav\";\r\nimport highPulse from \"./Sound/highPulse.wav\";\r\n\r\nclass Metronome extends React.Component {\r\n  state = {\r\n    playing: false,\r\n    count: 0,\r\n    bpm: 100,\r\n    beatsPerMeasure: 4,\r\n  };\r\n\r\n  click1 = new Audio(lowPulse);\r\n  click2 = new Audio(highPulse);\r\n\r\n  handleBpmChange = (e) => {\r\n    const bpm = e.target.value;\r\n\r\n    if (this.state.playing) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\r\n\r\n      this.setState({\r\n        count: 0,\r\n        bpm,\r\n      });\r\n    } else {\r\n      this.setState({ bpm });\r\n    }\r\n  };\r\n  startStop = () => {\r\n    if (this.state.playing) {\r\n      clearInterval(this.timer);\r\n      this.setState({\r\n        playing: false,\r\n      });\r\n    } else {\r\n      this.timer = setInterval(this.playClick(60 / this.state.bpm) * 1000);\r\n      this.setState(\r\n        {\r\n          count: 0,\r\n          playing: true,\r\n        },\r\n        this.playClick()\r\n      );\r\n    }\r\n  };\r\n\r\n  playClick = () => {\r\n    const { count, beatsPerMeasure } = this.state;\r\n\r\n    if (count % beatsPerMeasure === 0) {\r\n      this.click2.play();\r\n    } else {\r\n      this.click1.play();\r\n    }\r\n\r\n    this.setState((state) => ({\r\n      count: (state.count + 1) % state.beatsPerMeasure,\r\n    }));\r\n  };\r\n  render() {\r\n    const { playing, bpm } = this.state;\r\n    return (\r\n      <div className=\"metronome\">\r\n        <div className=\"bpm-slider\">\r\n          <div>{bpm}BPM</div>\r\n          <input\r\n            type=\"range\"\r\n            min=\"60\"\r\n            max=\"240\"\r\n            value={bpm}\r\n            onChange={this.handleBpmChange}\r\n          />\r\n        </div>\r\n        <button onClick={this.startStop}>{playing ? \"Stop\" : \"Start\"}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Metronome;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Metronome from \"./Metronome\";\n\nReactDOM.render(<Metronome />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}